@startuml
skinparam linetype ortho

title 【env】类图

'java
namespace java.long {
    interface Iterable {
        --
        iterator(): Iterator<T>
    }

    interface Comparable {
        --
        + compareTo(T o): int
    }
}



' springframework
namespace springframework.core.io #EEE {

' resources
    interface InputStreamSource {
        --
        getInputStream() throws IOException: InputStream
    }

    interface Resource {
        --
        + exists(): boolean
        + getURL():  URL
        + getFile(): File
        + contentLength(): long
        + getFilename(): String
    }

    InputStreamSource <|-- Resource
}


namespace springframework.core.env #EEE {

    abstract class PropertySource {
    	# name: String
    	# source: T
    	--
    	+ equals(@Nullable Object other): boolean
    	+ {abstract} getProperty(String name): Object
    }


    class StubPropertySource {
    }

    PropertySource <|-- StubPropertySource


    abstract class EnumerablePropertySource<T> {
    	--
    	+ @Override containsProperty(String name): boolean
    	+ {abstract} getPropertyNames(): String[]
    }

    PropertySource <|-- EnumerablePropertySource


    class MapPropertySource {
    	--
    	+ getProperty(String name): Object
    	+ containsProperty(String name): boolean
    	+ @Override getPropertyNames(): String[]
    }

    EnumerablePropertySource <|-- MapPropertySource

    class PropertiesPropertySource {
    	--
    	+ @Override getPropertyNames(): String[]
    }

    MapPropertySource <|-- PropertiesPropertySource




    interface PropertySources {
    }

    java.long.Iterable <|--- PropertySources


    class MutablePropertySources {
        - propertySourceList : List<PropertySource<?>>
        --
        + addLast(PropertySource<?> propertySource): void
        + addFirst(PropertySource<?> propertySource): void
        + iterator(): Iterator<PropertySource<?>>
    }

    PropertySources <|.. MutablePropertySources



' loader
    interface PropertySourceLoader {
        + load(String name, Resource resource): List<PropertySource<?>>
    }

    class PropertiesPropertySourceLoader {

    }
    PropertySourceLoader <|.. PropertiesPropertySourceLoader


    class YamlPropertySourceLoader {

    }
    PropertySourceLoader <|.. YamlPropertySourceLoader


' resolver
    interface PropertyResolver {
        --
        + resolvePlaceholders(String text): String
        + resolveRequiredPlaceholders(String text): String
    }

    interface Environment {
    	--
    	# getActiveProfiles(): String[]
    }


    interface ConfigurablePropertyResolver {
        --
        + getConversionService(): ConfigurableConversionService
        + setConversionService(ConfigurableConversionService conversionService): void
        + setPlaceholderPrefix(String placeholderPrefix): void
        + setPlaceholderSuffix(String placeholderSuffix): void
    }

    interface ConfigurableEnvironment {
        --
        + setActiveProfiles(String... profiles): void
        + setDefaultProfiles(String... profiles): void
        + getPropertySources(): MutablePropertySources
        + getSystemProperties(): Map<String, Object>
        + getSystemEnvironment(): Map<String, Object>
        + merge(ConfigurableEnvironment parent): void
    }

    PropertyResolver <|-- Environment
    PropertyResolver <|-- ConfigurablePropertyResolver

    Environment <|-- ConfigurableEnvironment
    ConfigurablePropertyResolver <|-- ConfigurableEnvironment


    interface ConfigurableWebEnvironment {
        --
        initPropertySources(@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig): void
    }
    ConfigurableEnvironment <|-- ConfigurableWebEnvironment


    class AbstractEnvironment {
        - final propertySources: MutablePropertySources
        - final propertyResolver: ConfigurablePropertyResolver
        --
        + AbstractEnvironment()
    }
    note left of AbstractEnvironment::AbstractEnvironment
        this.propertySources = new MutablePropertySources()
        this.propertyResolver = createPropertyResolver(propertySources)
        customizePropertySources(propertySources);
    end note


    ConfigurableEnvironment <|-- AbstractEnvironment


    class StandardEnvironment {

    }

    AbstractEnvironment <|-- StandardEnvironment



    class StandardServletEnvironment {

    }
    StandardEnvironment <|-- StandardServletEnvironment
    ConfigurableWebEnvironment <|-- StandardServletEnvironment






    abstract class AbstractPropertyResolver {
        - volatile conversionService: ConfigurableConversionService
    	--
    	+ @Override getConversionService(): ConfigurableConversionService

    }

    ConfigurablePropertyResolver <|.. AbstractPropertyResolver


    class PropertySourcesPropertyResolver {
        - final propertySources: PropertySources
    }

    AbstractPropertyResolver <|-- PropertySourcesPropertyResolver




' service
    interface ConversionService {
        --
        convert(@Nullable Object source, Class<T> targetType): <T> T
    }

    class GenericConversionService {
        + @Override convert(@Nullable Object source, Class<T> targetType): <T> T
    }

    ConversionService <|.. GenericConversionService


    class DefaultConversionService {
        + addDefaultConverters(ConverterRegistry converterRegistry): void
    }

    GenericConversionService <|-- DefaultConversionService



' registry
    interface ConverterRegistry {
    	--
        + addConverter(Converter<?, ?> converter): void
        + addConverter(GenericConverter converter): void
        + addConverterFactory(ConverterFactory<?, ?> factory): void
    }


' factory
    interface ConverterFactory<S, R> {
    	--
        + getConverter(Class<T> targetType): <T extends R> Converter<S, T>
    }


'#  contributors

}


' boot
namespace boot #EEE {
    class ApplicationServletEnvironment {
        --
    }
    springframework.core.env.StandardServletEnvironment <|-- ApplicationServletEnvironment
    note right of ApplicationServletEnvironment
        添加一个转换器，
        environment.setConversionService(new ApplicationConversionService());
    end note

}

namespace boot.origin #EEE {

    interface Origin {
        --
        + default getParent(): Origin
        + {static} from(Object source): Origin
        + static List<Origin> parentsFrom(Object source)
    }


    interface OriginProvider {
        --
        + getOrigin(): Origin
    }

    class ConfigDataLocation {
        - final optional: boolean
        - final value: String
        - final origin: Origin

    }

    OriginProvider <|-- ConfigDataLocation
}

namespace boot.context.properties.source #EEE {

    class ConfigurationPropertyName {
        --
    }

    java.long.Comparable <|.. ConfigurationPropertyName


    interface ConfigurationPropertySource {
        --
        getConfigurationProperty(ConfigurationPropertyName name): ConfigurationProperty

    }


    class SpringConfigurationPropertySource {
        --
    }
    ConfigurationPropertySource <|-- SpringConfigurationPropertySource


    class DefaultResolver {

    }
    springframework.core.env.PropertySourcesPropertyResolver <|-- DefaultResolver


    class ConfigurationPropertySourcesPropertyResolver {
    	- final propertySources: MutablePropertySources
    	- final defaultResolver: DefaultResolver
    	--
    	+ ConfigurationPropertySourcesPropertyResolver(MutablePropertySources propertySources)
    }
    note right of ConfigurationPropertySourcesPropertyResolver::ConfigurationPropertySourcesPropertyResolver
    	this.propertySources = propertySources;
    	this.defaultResolver = new DefaultResolver(propertySources);
    end note


    springframework.core.env.AbstractPropertyResolver <|-- ConfigurationPropertySourcesPropertyResolver


}




namespace boot.context.config #EEE {

    class ConfigDataEnvironmentPostProcessor {
        + postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application): void
    }
    note left of ConfigDataEnvironmentPostProcessor::postProcessEnvironment
        核心入口
    end note

    class ConfigurationPropertySourcesPropertySource {

    }

    springframework.core.env.PropertySource <|-- ConfigurationPropertySourcesPropertySource


'-----------------
    class ConfigDataEnvironment{
    	{static} final DEFAULT_SEARCH_LOCATIONS: ConfigDataLocation[]

    }

'
    interface ConfigData {
        - propertySources: List<PropertySource<?>>
    }

    abstract class ConfigDataResource {
        - optional: boolean
    }

    class StandardConfigDataResource {

    }
    ConfigDataResource <|-- StandardConfigDataResource

    class ConfigTreeConfigDataResource {

    }
    ConfigDataResource <|-- ConfigTreeConfigDataResource


'loader
    interface ConfigDataLoader<R extends ConfigDataResource> {
    	--
        default isLoadable(ConfigDataLoaderContext context, R resource): boolean
    }

    class ConfigDataLoaders {
    	- loaders: List<ConfigDataLoader<?>>
    	- resourceTypes: List<Class<?>>
    	--
    	+ ConfigDataLoaders(DeferredLogFactory logFactory, ConfigurableBootstrapContext bootstrapContext,
        			ClassLoader classLoader, List<String> names)

        + load(ConfigDataLoaderContext context, R resource): <R extends ConfigDataResource> ConfigData
    }


'imports
'-------------------------------------------
    class ConfigDataImporter {
        - final resolvers: ConfigDataLocationResolvers
        - final loaders: ConfigDataLoaders
        --
        + resolveAndLoad(ConfigDataActivationContext activationContext,
            ConfigDataLocationResolverContext locationResolverContext,
            ConfigDataLoaderContext loaderContext,
            List<ConfigDataLocation> locations): Map<ConfigDataResolutionResult, ConfigData>
    }

'resolver
    interface ConfigDataLocationResolver {
        --
        + isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location): boolean
        + resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location): List<R>
        + resolveProfileSpecific(ConfigDataLocationResolverContext context, ConfigDataLocation location, Profiles profiles): List<R>

    }


'context
    interface ConfigDataLocationResolverContext {
    	--
    	+ getBinder(): Binder
    	+ getParent(): ConfigDataResource
    	+ getBootstrapContext(): ConfigurableBootstrapContext
    }

    interface ConfigDataLoaderContext {
    	--
    	+ getBootstrapContext(): ConfigurableBootstrapContext
    }

'contributor
    class ConfigDataEnvironmentContributor {
        - final location: ConfigDataLocation
        - final resource: ConfigDataResource
        - final fromProfileSpecificImport: boolean
        - final propertySource: PropertySource<?>
        - final configurationPropertySource: ConfigurationPropertySource
        - final properties: ConfigDataProperties
        - final children: Map<ImportPhase, List<ConfigDataEnvironmentContributor>>
        - final kind: Kind
	}

	java.long.Iterable <|-- ConfigDataEnvironmentContributor

}



@enduml
